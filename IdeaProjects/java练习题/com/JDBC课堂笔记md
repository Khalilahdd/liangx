#今日内容

    1.JDBC基本概念
    2.快速入门
    3.对JDBC中各个接口和类详解


#JDBC：
    1.概念：Java DateBase Connectivity     java数据库连接，java语言操作数据库
    JDBC本质：其实是官方（sum公司）定义的一套操作所以关系型数据库的规则，即接口，各个数据库厂商去实现这套接口，提供数据库驱动jar包，我们可以使用
        这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类

    2.快速入门：
            步骤：
                        //1.导入驱动jar包
                        //2.注册驱动
                        Class.forName("com.mysql.jdbc.Driver");
                        //3.获取数据库的连接对象
                        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/trade", "root", "root");
                        //4.定义SQL语句
                        String sql = "update Products set UnitPrice = 500 where ProductID = 1";
                        //获取执行SQL的对象 Statement
                        Statement stat = connection.createStatement();
                        //6.执行SQL
                        int count = stat.executeUpdate(sql);
                        //7.处理结果
                        System.out.println(count);
                        //8.释放资源
                        stat.close();
                        connection.close();



    3.详解各个对象
        1.DriverManager：驱动管理对象
            功能：
                1.注册驱动:告诉程序该使用哪一个数据库驱动jar
                    static void registerDriver(Driver driver):注册与给定的驱动程序 DriverManager
                    写代码使用：Class.forName("com.mysql.jdbc.Driver");
                    通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块
                    static {
                        try {
                            java.sql.DriverManager.registerDriver(new Driver());
                        } catch (SQLException E) {
                            throw new RuntimeException("Can't register driver");
                        }
                    }

                注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。
                2.获取数据库连接：
                    方法：static Connection getConnection(String url,String user,String password);
                    参数：
                        url：指定连接的路径
                            语法：jdbc:mysql://ip地址(域名):端口号/数据库名称
                            例子：jdbc:mysql://localhost:3306/trade
                            细节：如果连接的是本机mysql服务器，并且mysql服务默认端口号是3306，则url可以简写为：jdbc:mysql:///数据库名称
                        user：用户名
                        password：密码
        2.Connection：数据库连接对象
            1.功能：
                1.获取执行sql的对象
                    Statement createStatement()
                    PreparedStatement prepareStatement(String sql)
                2.管理事务：
                    开启事务：setAutoCommit(boolean autoCommit):调用该方法设置参数为false，即开启事务
                    提交事务：commit()
                    回滚事务：rollback()
        3.Statement：执行sql的对象
            1.执行sql
                boolean execute(String sql):可以执行任意的sql （了解）
                int executeUpdate(String sql):执行DML（insert，update，delete）语句，DDL（create，alter，drop）语句
                    返回值：影响的行数,可以通过这个影响的行数判断DML语句是否执成功 返回值>0的则执行成功，反之则执行失败
                ResultSet executeQuery(String sql)：执行DQL（select）语句

            2.练习：
                1.Product表 添加一条记录
                2.Product表 修改记录
                3.Product表 删除一条记录
        4.ResultSet：结果集对象，封装程序结果
            1.boolean next()：游标向下移动一行，判断当前行是否是最后一行末尾（是否有数据），如果是，则返回false，如果不是，则返回true
            2.getXxx():获取数据
                Xxx:代表数据类型      如：int getInt() ， String getString()
                参数：
                    1.int：代表列的编号，从1开始   如：getString(1)
                    2.String：代表列的名称，    如：getDouble("balance")

            注意：
                使用步骤：
                    1.游标向下移动一行
                    2.判断是否有数据
                    3.获取数据

                     //循环判断（游标是否是最后一行）是否有下一行
                                while (rs.next()) {
                                    //获取数据
                                    int ShipperID = rs.getInt(1);
                                    String CompanyName = rs.getString("CompanyName");
                                    String Phone = rs.getString(3);

                                    System.out.println(ShipperID  + "---" + CompanyName + "---" + Phone);
                                }

            练习：
                定义一个方法：查询OrderDetails表的数据将其封装为对象，然后装载集合，返回。
                    1.定义orderDetails类
                    2.定义方法 public List<orderDetails> findAll(){}
                    3.实现方法 select * from Products;

        5.PreparedStatement：执行sql的对象
            1.sql注入问题：在拼接SQL时，有一些SQL的特殊关键字参与字符串的拼接，会造成安全性问题
                1.输入用户随便，输入密码a' or 'a' = 'a
                2.SQL：select * from user where Username = 'dasfsdfs' and password = 'a' or 'a' = 'a'


            2.解决sql注入问题：使用PreparedStatement对象解决
            3.预编译的sql：参数使用?作为占位符
            4.步骤：
                1.导入驱动jar包
                2.注册驱动
                3.获取数据库的连接对象 Connection
                4.定义sql
                    注意：sql的参数使用?作为占位符。如：select * from user where username = ? and password = ?;
                5.获取执行sql语句的对象 PreparedStatement Connection.prepareStatement(String sql)
                    给?赋值：
                        方法：setXxx(参数1,参数2)
                            参数1：?的位置编号 从1开始
                            参数2：?的值
                6.执行SQL，接收返回结果，不需要传递SQL语句
                7.处理结果
                8.释放资源

            5.注意：后期都会使用PreparedStatement来完成增删改查的所以操作
                1.可以防止sql注入
                2.效率更高



##  抽取JDBC工具类：JDBCUtils
    目的：简化书写
    分析：
        1.注册驱动也抽取
        2.抽取一个方法获取连接对象
            需求：不想传递参数（麻烦），还得保证工具类的通用性
            解决：配置文件
                jdbc.properties
                url =
                user =
                password =
        3.抽取一个方法来释放资源




    练习：
        需求：
            1.通过硬盘录入用户名和密码
            2.判断用户是否登录成功

        步骤：
            1.创建数据库












##JDBC控制事务：
    1.事务：一个包含多个步骤的业务操作，如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。
    2.操作：
        1.开启事务：setAutoCommit(boolean autoCommit):调用该方法设置参数为false，即开启事务
        2.提交事务：commit()
        3.回滚事务：rollback()
    3.使用Connection对象来管理事务
        1.开启事务：setAutoCommit(boolean autoCommit):调用该方法设置参数为false，即开启事务
            在执行SQL之前开启事务
        2.提交事务：commit()
            当所有sql都执行完提交事务
        3.回滚事务：rollback()
            在catch中回滚事务

























